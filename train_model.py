"""Dinner-dash.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FhHHx0gLJgWov0z9aKpbqlSDSjTn1ALH
"""

import pandas as pd
import numpy as np
import tensorflow as tf
import io

"""Retrieve data from csv files"""

predictors = ["Semester", "Week", "Day"]
targets = ["Diners Before 7pm","Total"]

train_df = pd.read_csv('train.csv')
train_df.head()

"""Data processing"""

train_df = train_df.loc[:, ~train_df.columns.str.contains('^Unnamed')]
train_df.head()

"""Normalise data"""

'''
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range=(0, 1)) # TO BE UPDATED 

#Scale both the training inputs and outputs
scaled_train = scaler.fit_transform(train_df)
#scaled_test = scaler.transform(test_df)


multiplied_by = scaler.scale_[2] # TO BE UPDATED
added = scaler.min_[2] # TO BE UPDATED

scaled_train_df = pd.DataFrame(scaled_train, columns=train_df.columns.values)
'''

X = train_df.drop(targets, axis=1).values
Y = train_df[targets].values

"""Build model"""

model = tf.keras.Sequential()

model.add(tf.keras.layers.Flatten(input_shape=X.shape[1:]))
model.add(tf.keras.layers.Dense(50, activation='relu'))
model.add(tf.keras.layers.Dense(100, activation='relu'))
model.add(tf.keras.layers.Dense(50, activation='relu'))
model.add(tf.keras.layers.Dense(2))

model.compile(loss='mean_squared_error', optimizer='adam')

"""Train"""

model.fit(
    X[10:],
    Y[10:],
    epochs=1000,
    shuffle=True,
    verbose=2
)

"""Export model"""

model_json = model.to_json()
with open("model.json", "w") as json_file:
    json_file.write(model_json)

model.save_weights("model.h5")
print("Saved model to disk")

"""Predict"""

test = np.asarray([1, 1, 1]).transpose()
test = np.asarray([test])
print(X[:1])
prediction = model.predict(test)

y_0 = prediction[0]
#print('Prediction with scaling - {}'.format(y_0))
#y_0 -= added
#y_0 /= multiplied_by
print("Dinner Prediction  - {}".format(y_0))

Y_0 = Y[0]
#print('Ground truth with scaling - {}'.format(Y_0))
#Y_0 -= added
#Y_0 /= multiplied_by

print('Ground Truth Dinner peeps - {}'.format(Y_0))

"""Testing metrics"""

test_error_rate = model.evaluate(X[:10], Y[:10], verbose=0)
print("The mean squared error (MSE) for the test dinner data set is: {}".format(test_error_rate))

